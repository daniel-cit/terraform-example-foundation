/**
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


provider "github" {
  owner = var.gh_repos.owner
  token = var.gh_token
}

locals {
  cicd_project_id = module.gh_cicd.project_id
  cluster_host    = "https://connectgateway.googleapis.com/v1/projects/${module.gh_cicd.project_number}/locations/global/gkeMemberships/${module.gh_gke_runner.cluster_membership_id}"

  base_cicd_apis = [
    "compute.googleapis.com",
    "admin.googleapis.com",
    "iam.googleapis.com",
    "billingbudgets.googleapis.com",
    "cloudbilling.googleapis.com",
    "serviceusage.googleapis.com",
    "cloudresourcemanager.googleapis.com",
    "iamcredentials.googleapis.com",
    "logging.googleapis.com",
    "monitoring.googleapis.com",
    "dns.googleapis.com",
  ]

  runners_apis = [
    "storage-component.googleapis.com",
    "secretmanager.googleapis.com",
    "container.googleapis.com",
    "gkehub.googleapis.com",
    "gkeconnect.googleapis.com",
    "connectgateway.googleapis.com",
  ]

  activate_apis = var.enable_gcp_runners ? distinct(concat(local.base_cicd_apis, local.runners_apis)) : local.base_cicd_apis

  gh_config = {
    "bootstrap" = var.gh_repos.bootstrap,
    "org"       = var.gh_repos.organization,
    "env"       = var.gh_repos.environments,
    "net"       = var.gh_repos.networks,
    "proj"      = var.gh_repos.projects,
  }

  sa_mapping = {
    for k, v in local.gh_config : k => {
      sa_name   = google_service_account.terraform-env-sa[k].name
      attribute = "attribute.repository/${var.gh_repos.owner}/${v}"
    }
  }

  commom_secrets = {
    "PROJECT_ID" : module.gh_cicd.project_id,
    "WIF_PROVIDER_NAME" : module.gh_oidc.provider_name,
    "TF_BACKEND" : module.seed_bootstrap.gcs_bucket_tfstate,
    "TF_VAR_gh_token" : var.gh_token,
  }

  secrets_list = flatten([
    for k, v in local.gh_config : [
      for secret, plaintext in local.commom_secrets : {
        config          = k
        secret_name     = secret
        plaintext_value = plaintext
        repository      = v
      }
    ]
  ])

  sa_secrets = [for k, v in local.gh_config : {
    config          = k
    secret_name     = "SERVICE_ACCOUNT_EMAIL"
    plaintext_value = google_service_account.terraform-env-sa[k].email
    repository      = v
    }
  ]

  gh_secrets = { for v in concat(local.sa_secrets, local.secrets_list) : "${v.config}.${v.secret_name}" => v }

}

module "gh_cicd" {
  source  = "terraform-google-modules/project-factory/google"
  version = "~> 12.0"

  name              = "${var.project_prefix}-b-cicd-wif-gh"
  random_project_id = true
  org_id            = var.org_id
  folder_id         = google_folder.bootstrap.id
  billing_account   = var.billing_account
  activate_apis     = local.activate_apis
}

module "gh_oidc" {
  source  = "terraform-google-modules/github-actions-runners/google//modules/gh-oidc"
  version = "~> 3.1"

  project_id  = module.gh_cicd.project_id
  pool_id     = "foundation-pool"
  provider_id = "foundation-gh-provider"
  sa_mapping  = local.sa_mapping
}

resource "github_actions_secret" "secrets" {
  for_each = local.gh_secrets

  repository      = each.value.repository
  secret_name     = each.value.secret_name
  plaintext_value = each.value.plaintext_value
}

module "gh_gke_runner" {
  source = "./modules/gh-gke-runner"
  count  = var.enable_gcp_runners ? 1 : 0

  project_id                 = module.gh_cicd.project_id
  environment_code           = "b"
  region                     = var.default_region
  subnet_ip                  = "10.3.0.0/24"
  auth_subnet_ip             = "10.60.0.0/17"
  ip_range_pods_cidr         = "192.168.0.0/18"
  ip_range_services_cider    = "192.168.64.0/18"
  private_service_connect_ip = "10.10.64.5"
  master_ipv4_cidr_block     = "172.16.0.0/28"
  nat_enabled                = true
}


resource "time_sleep" "wait_gke_runner" {
  count = var.enable_gcp_runners ? 1 : 0

  depends_on = [module.gh_gke_runner]

  create_duration = "30s"
}

resource "helm_release" "cert_manager" {
  count = var.enable_gcp_runners ? 1 : 0

  name             = "cert-manager"
  namespace        = "cert-manager"
  chart            = "cert-manager"
  repository       = "https://charts.jetstack.io"
  version          = var.cert_manager_version
  create_namespace = true
  wait             = true

  set {
    name  = "installCRDs"
    value = "true"
  }

  depends_on = [time_sleep.wait_gke_runner]
}

resource "time_sleep" "wait_cert_manager" {
  count = var.enable_gcp_runners ? 1 : 0

  depends_on = [helm_release.cert_manager]

  create_duration = "30s"
}

resource "helm_release" "actions_runner_controller" {
  count = var.enable_gcp_runners ? 1 : 0

  name             = "actions-runner-controller"
  chart            = "actions-runner-controller"
  repository       = "https://actions-runner-controller.github.io/actions-runner-controller"
  version          = var.actions_runner_controller_version
  namespace        = "actions-runner-system"
  create_namespace = true
  wait             = true

  set {
    name  = "authSecret.create"
    value = "true"
  }

  set {
    name  = "authSecret.github_token"
    value = var.gh_token
  }

  depends_on = [time_sleep.wait_cert_manager]
}
